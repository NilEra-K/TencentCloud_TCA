Chapter1 TSF平台介绍
	1.1 TSF简介
		- 微服务治理的缺点
		  · 运维复杂: 原来运维一个系统, 微服务架构后, 运维N个微服务.
		  · 代码改造复杂: 老旧代码改造困难, 新架构下开发设计流程不熟悉.
		  · 架构复杂度高: 原来的单一系统, 或总线系统架构, 转换为网状结构.
		  · 定位问题困难: N个微服务之间互相调用过程复杂, 出问题很难定位.
		
		- 微服务对于运维(缺点)	- 微服务对于开发者
		  · 单服务挂			  · 代码复用率高
		  · 频繁升级			  · 基于Devops需求快速响应
		  · 排障难				  · 性能快速提升
		  · 环境复杂			  · 数据统一性, 数据访问能力提升
		  · 模块多				  · 数据存储依赖性降低
		  · 路由混乱			  · 资源利用率提升
		
		- 微服务平台需要具备的能力
		  · 跨环境部署运维
		  · 服务监控告警
		  · 服务治理
		  · 集中化配置管理
		  · 集中化日志管理
		  · 微服务接口规范
		  · 详细调用链跟踪排障
		
		- 腾讯微服务平台TSF(Tencent Service Framework)是一个围绕应用和微服务的Paas平台
		  · 提供服务全生命周期管理能力和数据化运营支持.
		  · 提供多维度应用, 服务, 机器的监控数据, 助力服务性能优化.
		  · 拥抱Spring Cloud, Service Mesh 微服务框架.
		  · 让企业轻松构建大型分布式系统.
		
		- TSF与自建服务治理平台
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|      优势项      |    		                        TSF服务治理平台    		                        |    自建服务治理平台    |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|     应用部署     |                    成熟, 灵活的部署方案, 支持灰度发布等高级能力                    |    自行开发部署模块    |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|     服务治理     |             支持细粒度的服务路由, 限流, 鉴权功能, 控制台进行可视化配置             |     自行搭建和维护     |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|   服务注册中心   |                     平台提供高可用的注册中心集群, 金融级别容灾                     |     自行搭建和维护     |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|     配置管理     | 分布式配置, 支持从环境, 版本, 应用三个维度进行管理, 配置动态推送和历史推送回溯能力 |     自行搭建和维护     |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|     日志服务     |         提供从采集, 呈现, 解析, 检索一站式能力, 帮助开发者快速定位目标日志         | 基于 ELK等开源组件搭建 |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|    调用链能力    |                       符合国人习惯的交互方式, 与日志服务联动                       | 使用开源组件, 英文界面 |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|    分布式事务    |                  提供分布式事务解决方案, 经腾讯内部多产品实践验证                  |   使用开源或自行开发   |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|  微服务API 网关  |        腾讯云API网关提供微服务网关能力, 支持配置负载均衡, 熔断, 限流等策略         |   基于Zuul等组件开发   |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			| 与腾讯云服务整合 |                                与腾讯云服务深度整合                                |      基于云API开发     |
			+------------------+------------------------------------------------------------------------------------+------------------------+
			|     售后服务     |                  提供稳定及时的售后服务, 强大的技术, 运维团队支持                  |     企业运维团队支持   |
			+------------------+------------------------------------------------------------------------------------+------------------------+

	1.2 TSF功能及整体架构
		- 微服务框架: 提供Spring Cloud, Dubbo, ServiceMesh, TSF RPC框架等多种框架的能力提供业务接入和适配.
		- DEVOPS: 提供敏捷开发到CI/CD的全流程一站式解决方案, 打通从开发到发布的各环节.
		- 服务化能力支撑: 提供连接其他资源的能力, 比如整合CKV, 分布式数据库中间件, 分布式事务, Ckafka, CMQ
						  等等, 提供统一能力输出给业务,打造技术中台
		- 数据化运营: 提供多维度的数据化能力, 整合给业务方进行业务运营
		- 服务治理: 提供服务注册与发现/服务鉴权/服务路由/服务限流/服务调度等基础微服务治理能力
			||
			||
			||
		   _||_
		   \  /
		    \/
		- 跨环境部署运维
		- 服务监控告警
		- 服务治理
		- 集中化配置管理
		- 集中化日志管理
		- 微服务接口规范
		- 详细调用链跟踪排障

		※ TSF整体架构
		

		+================+		
		| 腾讯云组件     |
		| +------------+ |
		| |  负载均衡  | |
		| +------------+ |
		|                |
		| +------------+ |
		| |  API 网关  | |
		| +------------+ |
		|                |
		| +------------+ |
		| |    TSF     | |
		| +------------+ |
		|                |
		| +------------+ |
		| |  消息队列  | |
		| +------------+ |
		|                |
		| +------------+ |
		| |  虚 拟 机  | |
		| +------------+ |
		|                |
		| +------------+ |
		| |  容    器  | |
		| +------------+ |
		+================+
		
		1.2.1 利用TSF打造企业技术中台
			+================================================================================================+
			| +----------------+ +----------------+ +----------------+ +----------------+ +----------------+ |
			| |    政企应用    | |    金融应用    | |   互联网应用   | | 工业物联网应用 | |    智慧零售    | |
			| +----------------+ +----------------+ +----------------+ +----------------+ +----------------+ |
			+===================================================================================业=务=中=台==+	构建业务中台

			+===================================================================================技=术=中=台==+	新业务微服务化
			| 	+----------------+	 +----------------+ 	+----------------+		+----------------+		 |  微服务架构渐进式演进    
			| 	|    注册中心    |	 | 分布式调用监控 |		| 服务发布, 回滚 |		| 流控, 熔断服务 |		 |  定制化方案输出
			| 	+----------------+	 +----------------+		+----------------+	 	+----------------+		 |
			| 	+----------------+	 +----------------+		+----------------+	 	+----------------+		 |         
			| 	| 持续集成, 开发 |	 | 应用弹性扩缩容 |		| 服务注册, 发现 |	 	|   调用链日志   |		 |         
			| 	+----------------+	 +----------------+		+----------------+	 	+----------------+		 |            
			| 	+----------------+	 +----------------+		+----------------+	 	+----------------+		 |                    
			| 	|  生命周期管理  |	 |   分布式配置   |		|   权限, 流控   |	 	|    蓝绿发布    |		 |          
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |            
			|  	                                   TSF 服务框架                                              |                                  
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |		           
			| 	|    负载均衡    |	 |      CMQ       |	 	|     Kafka      |	 	|  IoT GatrWay   |		 |            
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 | 
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |                    
			| 	|  API GateWay   |	 |    消息总线    |	 	|  ServiceLess   |	 	| 分布式事务服务 |		 |
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |
			+===================================================================================技=术=中=台==+

			+================================================================================云=基=础=资=源==+
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |		           
			| 	|    云服务器    |	 |    云数据库    |	 	|     云存储     |	 	|     云缓存     |		 |            
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 | 
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |                    
			| 	|    专线加速    |	 |    GPU/FPGA    |	 	|  VPC私有网络   |	 	|    数据中心    |		 |
			| 	+----------------+	 +----------------+	 	+----------------+	 	+----------------+		 |
			+================================================================================云=基=础=资=源==+
		
		1.2.2 TSF用户面板
			- 核心功能
			  · 资源中心
			  · 应用中心
				# 应用管理
				# 服务治理
				# 配置管理
				# 事务管理
			  · 运维中心
			  · 仓库中心
		1.2.3 TSF资源介绍
			+=========命======名=====空======间=========+
			|+--容器集群Cluster--+ +-虚拟机集群Cluster-+|
			||+---部署组Group---+| |+---部署组Group---+||
			|||+---------------+|| ||+---------------+|||
			|||| Consumer Demo ||| ||| Consumer Demo ||||
			||||      Pod      ||| |||               ||||
			||||   File Beat   ||| |||     Agent     ||||
			|||+---------------+|| ||+---------------+|||
			|||+---------------+|| ||+---------------+|||
			|||| Consumer Demo ||| ||| Consumer Demo ||||
			||||      Pod      ||| |||               ||||
			||||   File Beat   ||| |||     Agent     ||||
			|||+---------------+|| ||+---------------+|||
			|||+---------------+|| ||+---------------+|||
			|||| Provider Demo ||| ||| Provider Demo ||||
			||||      Pod      ||| |||               ||||
			||||   File Beat   ||| |||     Agent     ||||
			|||+---------------+|| ||+---------------+|||
			|||+---------------+|| ||+---------------+|||
			|||| Consumer Demo ||| ||| Consumer Demo ||||
			||||      Pod      ||| |||               ||||
			||||   File Beat   ||| |||     Agent     ||||
			|||+---------------+|| ||+---------------+|||
			||+-----------------+| |+-----------------+||
			|+-------------------+ +-------------------+|
			+===========================================+
Chapter2 容器的介绍与使用
	2.1 容器介绍
		传统软件交付:
			开发环境(代码|项目依赖及配置文件)-->测试环境(代码|项目依赖及配置文件)-->生产环境(代码|项目依赖及配置文件)
		容器化交付:
			容器(代码|项目依赖及配置文档)
		
		2.1.1 主流的容器技术
			Docker是PaaS提供商DotCloud开源的一个基于LXC(Linux容器项目)的高级容器引擎. 
			Docker近年来非常火热, 无论是Google, Amazon, Facebook,还是国内的BAT, 新浪, 
			京东等公司都利用Docker作为云平台的基础.
		
		2.1.2 容器 VS 虚拟机
			+------------+----------------+------------+
			|    特性    |      容器      |   虚拟机   |
			+------------+----------------+------------+
			|    启动    |      秒级      |   分钟级   |
			+------------+----------------+------------+
			|  硬盘使用  |    一般为MB    |  一般为GB  |
			+------------+----------------+------------+
			| 性能利用率 |    接近原生    |    弱于    |
			+------------+----------------+------------+
			| 系统支持量 | 单机支持上千个 | 一般几十个 |
			+------------+----------------+------------+
			
		2.1.3 利用Docker部署的优势
			- 从项目的角度看
			  · 一致的环境
			  · 在任何地方运行
			  · 资源隔离
			  · 轻量级
			- 从工程人员的角度看
			  · 容器之于开发: Build Once, Run Anywhere.
			  · 容器之于运维: Configure Once, Run Anything.
		
		2.1.4 容器编排
			- 容器增多所带来的问题
			  · 如何进行容器集群的管理
			  · 如何管理服务
			  · 如何进行配置管理
			  · 如何进行镜像管理
			- 容器管理软件
			  · Docker Swarm 
			  · Kubernetes(K8S)
		
		2.1.5 Docker核心概念
			- 镜像(Image)
			  · 类似虚拟机镜像, 一个只读的模板

			- 容器(Container)
			  · Docker利用容器来运行应用

			- 仓库(Repository)
			  · 仓库是集中尺寸发镜像文件的场所
			  · 分为私有仓库和共有仓库两类
			  
			远程镜像服务器
			   镜像仓库
				  /\
				 /  \ PUSH
			      ||
			      ||
			     _||_
				 \  / PULL
				  \/
				 镜像<--------------------->容器
			本地	 COMMIT           实例化

	2.2 Docker基本使用
		- 安装Dockers实验环境
		  · 软件: 腾讯云CVM 安装CentOS-7.4的操作系统
		  · 在线安装Docker
			# 在线安装Docker: yum install -y docker
			# 启动Docker服务: systemctl start docker.service
			# 开机启动Docker: systemctl enable docker.service
			# 确定Docker的版本: docker version
		
		Docker基本命令
			- 基本Docker命令:
			  · docker login								# 登录到Docker仓库
			- 镜像相关:
			  · docker images								# 查看系统中的镜像
			  · docker pull <username>/<repository>			# 从仓库拉取镜像
			  · docker push <username>/<repository>:<tag>	# 将自定义的镜像发布到仓库
			  · docker build -t <images-name>				# 使用当前目录下的Dockerfile构建镜像
			  · docker run <images-name>					# 使用镜像创建容器
			  · docker images rm <images id>				# 删除指定的镜像
			- 容器相关
			  · docker container ls							# 列出所有运行中的容器
			  · docker start <containerid/container-name>	# 启动容器
			  · docker stop <containerid/container-name>	# 停止容器
			  · docker restart <containerid/container-name>	# 重启容器
			  · docker rm <containerid/container-name>		# 删除容器
			- 更多命令参考:
			  · https://docs.docker.com/engine/reference/commandline/docker!
			
	2.3 Dockerfile基本使用
		制作镜像: 使用Dockerfile制作Docker镜像
		推送镜像: 将制作的镜像推送到Docker仓库
		拉取镜像: 从Docker仓库拉取镜像并创建容器
		=============================================================
		FROM centos:7
		RUN yum update -y && yum install -y java-1.8.0-openjdk
		COPY provider-demo-0.0.1-SNAPSHOTjar /data/tsf/
		COPY run.sh /data/tsf/
		# GMT+8 for CentOS
		RUN /bin/cp/usr/share/zoneinfo/Asia/Shanghai/etc/localtime
		RUN echo"Asia/Shanghai"> /etc/timezone
		# run.sh
		CMD ["sh","-c","cd /data/tsf; sh run.sh provider-demo-0.0.1-
		SNAPSHOT.jar /data/tsf"]
		=============================================================
			FROM: 确定基础镜像
			RUN:  执行命令
			COPY: 复制命令
			CMD:  容器启动命令

	2.4 利用DockerFile构建第一个镜像
		- 使用Docker(Dockerfile)创建镜像, 部署一个简单的Web应用.
		  · 操作步骤:
		    准备Dockerfile-->创建镜像-->创建容器并运行-->测试验证
		
		- 步骤1: 准备一个文件, 名叫Dockerfile
			From nginx
			RUN echo '<h1> TFS Demo Application and Docker</h1>'> /usr/share/nginx/html/index.html
		
		- 步骤2: 创建Docker镜像
		  · 在Dockerfile所在的目录下, 执行命令用于构建镜像
			docker build -t nginx:my .(注意这里有个点, 表示该目录下的dockerfile文件)
		  · 运行结果如下:
			Sending build context to Docker daemon 2.048 kBStep 1/2 : FROM nginx
			  ---> 06144b287844
			Step 2/2 : RUN echo '<h1>TFS Demo Application and Docker</h1>' > /usr/share/nginx/html/index.html
			  ---> Running in ealf88700c71
			  ---> 98e5a9c414b6
			Removing intermediate container ealf88700c71
			Successfully built 98e5a9c414b6
		
		- 步骤3: 使用Docker镜像创建容器:
			docker run -d -p 7788:80 nginx:my
		
		- 步骤4 使用浏览器访问主机的7788端口, 可以看到对应界面
		
Chapter3 TSF容器化部署
	3.1 云容器介绍
		TSF中容器资源说明:
			TSF中的容器资源基于腾讯云容器服务(Tencent Kubernetes Engine, TKE)
			腾讯云容器服务(Tencent Kubernetes Engine)是高度可扩展的高性能容器管理服务
			用户可以在托管的云服务器实例集群上轻松运行应用程序
		其主要特性有:
			生态开源, 安全可靠, 简单易用, 高效部署, 灵活拓展, 低成本
		
		3.1.1 TKE VS 开源Kubernetes
			+--------+----------------------------+--------------------------------+
			|  特性  |    腾讯云容器服务 (TKE)    |         开源Kubernetes         |
			+--------+----------------------------+--------------------------------+
			|  管理  |        简化集群管理        |            管理复杂            |
			+--------+----------------------------+--------------------------------+
			|  拓展  | 灵活集群托管, 集成负载均衡 |       可用性和可拓展性差       |
			+--------+----------------------------+--------------------------------+
			| 可靠性 |  资源高度隔离, 服务高可用  | 租户, 设备, 内核模块隔离等较差 |
			+--------+----------------------------+--------------------------------+
			|  效率  | 镜像快速部署, 业务持续集成 |   网络, 容器的创建效率无保证   |
			+--------+----------------------------+--------------------------------+
			|  成本  |        容器服务免费        |      人力成本, 硬件成本高      |
			+--------+----------------------------+--------------------------------+
		
		3.1.2 TKE总体架构
			用户接入{云API; Kubernetes API; Kubecti;}

			核心功能{
				集群管理{集群化托管; 独立部署; 自定义OS; Ipvs; 版本升级; GPU;}
				容器网络{Global模式; VPC模式;}
				应用管理{Helm Chart; Image Registry;}
				持久化存储{硬盘存储; 文件存储; 对象存储;}
				运维管理{监控告警; 日志采集; 事件持久化;}
			}

			整合产品{
				IAAS{CVM; BM; VPC; ENI; CLB; CBS; CFS; COS;}
				PAAS{CM; THub; CLS; ES; Kafka; TSF;}
			}
		
		3.1.3 腾讯云TKE的应用场景
			- TKE的应用场景有:
			  · 微服务架构
			  · 持续集成与交付
			  · 弹性伸缩
			  
	3.2 利用云容器部署TSF
		在TSF上, 使用Docker容器部署微服务, 主要步骤:
		创建容器集群-->导入云主机-->创建容器应用-->创建部署组-->初始化镜像仓库-->创建镜像和推送镜像到仓库-->部署应用
		官方文档查看: https://cloud.tencent.com/document/product/649/16697
		
	
	