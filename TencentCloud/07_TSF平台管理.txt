Chapter1 TSF配置管理
	1.1 配置管理概述
		- 配置管理:
		  · 解决分布式环境下多台实例的配置统一管理问题, TSF提供了具备分布式配置功能.
		- TSF的配置功能具有如下特点:
		  · 支持排至的分布式化管理
		  · 配置异构系统处理
		  · 支持在控制台上编写YAML格式的配置
		- 目前TSF分布式配置功能仅支持Spring Cloud类型的应用
		
		- 配置管理分类:
		  · 应用配置
		  · 全局配置
		  · 本地配置
		
		- 应用配置和全局配置属于TSF平台上的配置(下面称为远程配置), 本地配置是应用程序
		  在代码工程中创建的配置(如application.yml和bootstrap.yml)
		
		- 配置优先级: 应用配置>全局配置>本地配置
		
	1.2 应用配置
		TSF应用配置使用步骤:
			添加依赖-->引用配置-->TSF应用配置内容填写-->发布配置
		
		应用配置管理的功能
			- 应用配置的功能:
			  · 创建配置项: 一个配置项管理多个版本的配置
			  · 生成新版本: 基于历史版本生成新版本
			  · 发布配置: 支持发布配置到部署组
			  · 回滚: 回滚到上一个版本的配置
			  
	1.3 全局配置
		- 全局配置:
		  · 用于动态更新应用代码中的配置.
		  · 全局配置可以保证配置内容在某个集群或者命名空间中全局生效.
		- 全局配置包括管理配置和发布配置两部分.
		  · 管理配置包括创建配置、生成新版本配置和删除配置.
		  · 配置可以发布到命名空间下的所有应用.
		- 全局配置的使用跟前面提到的"应用配置"使用一致; 优先级不一样:
		- 优先级:应用配置>全局配置>本地配置

Chapter2 TSF服务治理
	2.1 服务治理概述
		- 微服务化使得这些微服务易于被小型的开发团队所理解和维护. 
		  然而也带来了很多挑战--例如:
		  · 服务注册与服务发现
		  · 监控
		  · 测试
		
		- 服务治理:
		  · 用于对用户运行业务的统一管理, 包含对线上流量的管控, 
		    服务监控与告警, 权限的限制, 抑制线上突发情况等...
		  · TSF提供了一个统一的入口对线上服务进行管理.
		- 现阶段 TSF服务治理包含
		  · 服务注册与发现
		  · 服务鉴权
		  · 服务路由
		  · 服务限流
		
		- 常见服务治理能力实现的功能
		  · 设置服务访问权限控制: 白名单黑名单
		  · 设置带有某些标签的请求访问(QQ绿钻, 用户带有绿钻标签可以访问海量音乐库)
		  · 控制设置流量最大限制, 保护核心服务(双十一)
		  · 灰度发布, 蓝绿发布
		  · 部分用户内测功能
		  · 就近IP访问
		  · 容灾与熔断
		  · 服务API的管理
		
	2.2 服务发现
		- Spring Cloud, Dubbo, Mesh都可以在服务注册中心直接发现服务, 并展示在服务列表中.
		- 创建服务的服务名和注册中心服务一致时, 会认为是同一个服务
		- 手动创建服务的应用场景: 支持用户在服务上线之前配置服务治理规则
		- 服务发现操作步骤:
		  · Mesh应用: 不需要改造代码
		  · Spring Cloud 应用:
		    pom.xml中添加依赖配置-->应用启动类中添加服务发现注解-->修改应用配置-->服务发现功能验证
			
	2.3 服务鉴权
		- 服务鉴权:
		  · 为了解决微服务之间相互访问的权限解决方案. 服务提供者通过配置中心下发的鉴权规则来判断是否处理服务消费者的请求. 
		- 使用场景:
		  · 控制核心服务(如账户钱财相关服务)的访问权限
		- 目前 TSF提供两种类型的服务鉴权规则:
		  · 基于黑名单的鉴权规则
		  · 基于白名单的鉴权规则
		- 鉴权规则支持标签形式配置:系统标签, 自定义标签
									+------+
									| 配置 |
									| 中心 |
									+------+
										|
									鉴权规则
									    ↓
		+----+ a.请求(tag信息) 		+------+ b1.鉴权通过  +------+
		| 消 +--------------------->| 鉴权 +------------->| 业务 |
		| 费 | b2.响应(鉴权未通过)	|      |			  |      |
		| 者 |<---------------------+ 模块 |			  | 逻辑 |
		+----+						+------+			  +--+---+
		  ↑													 |
		  |		c.响应										 |
		  +--------------------------------------------------+

		请求逻辑顺序说明:
		- 请求通过鉴权: a->b1->c
		- 请求未通过鉴权: a->b2
		
		应用配置依赖项目-->配置鉴权规则-->切换鉴权规则(可选)
												|
										  切换鉴权方式(从一种鉴权模式切换到另外一种鉴权模式)
										  - 白名单切换到黑名单\
										    黑名单切换到白名单-+->保留鉴权规则, 但鉴权逻辑逆转, 
																如果用户希望切换后, 使用新的规
																则, 则需要删除原有的, 再创建新
																的规则..
										  - 白名单(或黑名单)切换到不启用: 关闭鉴权功能..
		
	
	2.4 服务限流
		- 服务限流:
		  · 服务限流主要是保护服务节点或者数据节点, 
		    防止瞬时流量过大使服务和数据崩溃造成服务
			不可用
			
		- 限流原理:
										   +------------+
										   | TSF 控制台 |
										   +------------+
												 |
												 | 配置限流规则
												 ↓
		+------------+			+==========+------------+
		| 服务消费者 +--------->| 服务限流 | 服务提供者 |
		+------------+			+==========+------------+

		- 限流场景:
		  · 限流粒度-全局限流
		  · 限流力度-标签限流
		
		- 服务发现操作步骤:
		  · Mesh应用: 不需要改造代码, 如果希望使用基于标签的限流, 需要再代码中设置标签
		  · Spring Cloud 应用:
		    pom.xml中添加依赖配置-->应用启动类中添加限流注解-->新建限流规则并启动-->服务限流功能验证
		
		- 限流效果
		  · 如果请求数达到了限流阈值, 任何到达的请求都会被限流模块处理
			# 如果该服务上的配额已经消耗完, 会对请求返回HTTP 429(Too Many Requests);
			# 否则会正常放行
		
	2.5 服务路由
		- 服务路由:
		  · 通过特定要求的属性来选择服务的提供者, 对服务间流量的分配起到掌控的作用
		  · 常见使用场景
			# 灰度发布
			# 部分账号内测
			# 按照IP配置流量分配(如本地机房优先规则)
		
		- TSF配置服务路由功能支持以下三种配置来源
		  · 按照权重方式配置路由规则:
			# 按照权重配置将请求流量分配到服务提供方的某个版本下或某个部署组下.
		  · 按照系统自带标签的方式进行配置路由规则:
			# 按照系统自带标签的方式分配流量到对应服务器.
		  · 按照用户自定义的标签进行配置路由规则:
			# 按照用户自定义的标签分配流量到对应服务器.

	    - 服务路由功能(以灰度发布为例)实现(Spring Cloud)步骤
		  · pom.xml中添加依赖配置-->应用启动类中添加启用路由注解-->新建路由规则并启动-->服务路由功能验证

Chapter3 TSF故障排查
	3.1 服务依赖拓扑介绍
		- 服务依赖拓扑:
		  · 包含了查询服务之间相互依赖调用的拓扑关系, 查询特定集群特定命名空间服务之间调用的统计结果等功能.
		- 主要优势:
		  · 服务依赖关系
		  · 服务整体运行状况
		  · 服务间不合理调用
		  · 定位瓶颈服务, 出错服务
		
		- 使用步骤:
		  · 登陆TSF控制台-->输入查询条件-->查看依赖拓扑关系

	3.2 调用链介绍
		- TSF提供Spring Cloud应用与Service Mesh应用的调用链查询与依赖拓扑查询能力.
		- 用户可以在控制台上追踪每次调用, 查看调用时间, 状态, 监控数据
		- 用户可以在控制台上查看服务依赖关系.
		- 对Mesh服务, 用户不需要代码中改动.
		
		3.2.1 调用链的配置- Spring Cloud
			- 调用链功能配置:
			  · 为了节约用户的开发成本和提升效率， TSF提供了Spring Cloud 全链路跟踪组件
			  · 用户只需在代码中配置组件依赖, 即可直接使用TSF全链路跟踪功能.
			  · 添加 pomxml 依赖:
				<dependency>
					<groupld>com.tencent.tsf</groupld>
					<artifactld>spring-cloud-tsf-sleuth</artifactld>
				</dependency>
		
		3.2.2 调用链查询
			- 调用链查询
			  · 用来查询和定位具体某一次调用的情况. 使用者可以通过具体的服务, 接口定位, IP等来查询具体的调用过程, 查找调用过程所需要的时间和运行情况.
			- 调用链查询步骤
			  登录 TSF 控制台点击导航栏[调用链询]-->输入查询条件-->查看结果-->TracelD查询

