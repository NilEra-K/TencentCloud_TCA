Chapter1 缓存介绍
	1.1 缓存简介
		- 为什么需要缓存?
		  · 传统数据库的局限性:
			# 数据读取速度慢
			# 难以应对高并发访问
			
			+------+	  +----------+		+--------+
			| 用户 +----->| 服务器组 +----->| 数据库 |
			+------+	  +----------+		+--------+
		
		- 缓存实际上是一种加快系统响应速度的技术, 最早出现在CPU的设计当中
		  后来缓存这个概念被用于软件开发, 比如一些大型网站也在服务器里使用
		  内存作为缓存, 加快数据的读取速度(从内存中读取数据远比从数据库或磁
		  盘中读取数据来的快).其应用场景主要为:
		  · 热点数据(热搜, 头条...)
		  · 实时性要求不高的数据(点赞数...)
		  · 业务逻辑简单的数据
			+------+	  +----------+		+======+      +--------+
			| 用户 +----->| 服务器组 +----->| 缓存 |----->| 数据库 |
			+------+	  +----------+		+======+	  +--------+

	1.2 本地缓存VS分布式缓存
		本地缓存: 指的是在应用中的缓存组件. ※每个应用服务器都有各自的本地缓存, 无法共享
			用户-->发送请求-->有限查询本地缓存{应用服务器{本地缓存}, 
											   应用服务器{本地缓存},
													   ...			 缓存未命中
											   应用服务器{本地缓存}}------------>数据库

		分布式缓存: 指的是与应用分离的缓存组件或服务. ※分布式缓存可以弹性拓展, 不共同应用服务器共享缓存.
			应用服务器组{应用服务器, 应用服务器}-->缓存{Memcached, Redis}-->数据库
			本地缓存{一致性较差, 开销较大(主要是垃圾回收), 可靠性较差.}
			分布式缓存{一致性较好, 开销较小(主要是网络延迟和对象序列化), 可靠性很好.}

	1.3 常见的分布式缓存
		Memcached: 分布式的高速缓存系统
		Redis: 开源的, 支持网络的, 基于内存的键值对存储数据库
			Memcached{数据存储类型较少, 单核性能: 存储大数据时较好, 附加功能: 多线程服务支持};
			Redis{数据存储类型丰富, 单核性能: 存储小数据时较好, 附加功能: 丰富(发布订阅, 主从分区, 序列化)};
		

Chapter2 腾讯云缓存介绍
	2.1 腾讯云Redis简介
		腾讯云数据库Redis(TencentDB for Redis)是腾讯云打造的兼容Redis协议的缓存和存储服务.
		产品功能: 主从设备, 数据备份, 弹性扩容, 网络防护, 分布式存储.
		2.1.1 腾讯云Redis特性:
			托管部署, 数据库保障机制, 高性能, 平滑拓展, 全面的日常监控, 自定义告警, 数据迁移, 自动容灾, 费用低廉

		2.1.2 腾讯云Redis应用场景:	
			游戏, 互联网APP, 电商
			
	2.2 腾讯云Redis管理
		- 常用接口介绍:
		  · CreateInstances: 创建Redis实例
		  · DescribeInstances: 查询Redis实例列表
		  · ModifyAutoBackupConfig: 设置自动备份时间
		  · DestoryPostpaidInstancce: 按量计费实例销毁
		
		- 利用SDK操作Redis的流程: 
		  获取访问凭证-->设置参数信息-->调用相关接口
		
	2.3 腾讯云Redis使用
		# 连接本地数据库
		redis-cli
		# 插入数据:
		set key value
		setex key seconds value  # 数据seconds后会过期(变为nul)
		# 获取数据, 支持正则
		get key
		# 删除数据
		del key
		# 给数据设置过期
		expire key seconds
		
		- Python接入云Redis实验环境
		  · 软件:
			# 腾讯云CVM (安装Ubuntu-16.04的操作系统)
			# 腾讯云Redis
			# pip包管理工具
			# Flask框架
		  · 在CVM中安装实验环境
			# 在线安装pip3:sudo aptinstall python3-pip
			# 安装Flask框架: pip3 install flask
			# 安装Redis依赖: pip3 install redis
		
		- 接入流程:
			新建Flask项目-->配置Redis信息-->开发Redis操作的接口-->部署应用的CVM
		
		- Redis的配置信息
		  · 配置Redis信息
		    # ip信息
			# 端口信息
			# 密码(腾讯云Redis密码由 实例名+:+密码 组成)
			redis_conn = redis.Redis(host='172.16.0.4', port=6376, password='crs-79cgk0ur:psd')
			
Chapter3 消息队列介绍
	3.1 消息队列简介
		※ 理解: 比如有一个秒杀场景, 但是机器性能1s只能处理100个订单, 但是同时来了10000个订单, 为了
				防止系统崩溃, 我们使用消息队列, 1s处理100个订单, 分100秒处理这些订单. 
		- 什么是消息队列?
		  · 在计算机科学中, 消息队列(Message queue)是一种进程间通信或同一进程的不同线程间的通信方式. 
		    消息队列提供了异步的通信协议, 每一个队列中的纪录包含详细说明的数据, 包含发生的时间, 输入
			设备的种类, 以及特定的输入参数. 

		- 不使用消息队列存在的问题:
		  · 消息延迟影响业务
		  · 无法应对海量突发
		  · 存放消息空间有限
		  
		- 解决方案:把消息交给中介
		  · 应用改造: 
			# 从消费者 → 生产者到消费者 → 消息队列 → 生产者
		  · 把消息存到消息队列里(基于消息队列的软件架构)
		    Provider --> 消息队列 --> Consumer
			
	3.2 消息的类型
		- 消息的模型有:
		  · 队列模型
			Component 1 sends Message A to the queue.
			Component 2 retrieves Message A from the queue and the visibility timeout period starts.
			Component 2 processes Message A and then deletes it from the queue during the visibility timeout period.

		  · 主题模型
			发布/订阅模式下包括三个角色:
			主题(Topic)
			发布者(Publisher)
			订阅者(Subscriber)
			
			发布者\								   /订阅者(QueueA TopicA)
			发布者-+-- {TopicA, TopicB, TopicC} --+-订阅者(QueueB TopicB)
			发布者/								   \订阅者(QueueC TopicC)
		  
Chapter4 腾讯云消息队列CMQ
	4.1 CMQ简介
		- 腾讯云消息队列(Cloud Message Queue, CMQ)是一种分布式消息队列服务, 它能够提供可靠的基于消息的异步通信机制. 
		  其功能特性有:
		  · 高性能
		  · 高可用
		  · 横向扩展
		  · 安全可靠
		  · 易用免运维
		
		4.1.1 常见的消息队列
			- RabbirMQ{Erlang编写, 重量级, 路由(Routing), 负载均衡(Load Balance)或者数据持久化};
			- zeroMQ{轻量级, 非持久性队列, 必须学习它的80页的手册};
			- Jafka/Kafka{Scala语言开发, 轻量级, 高吞吐, 快速持久化, 客户端需要自己的测试和开发};
			- Apache ActiveMQ{开源项目, Java优先, 支持Master-Slave Broker-Cluster集群};
			- Rocket MQ{模型简单, 接口易用, 性能好, 阿里商业化版本, 没有在MQ核心实现JMS接口, 只支持Java};
		
		4.1.2 CMQ的优势
			- 轻量部署: 不需要阅读80页的手册, 轻松上手, 部署简单, 更少节点支撑.
			- 消息堆积无上限: 消息处理缓慢或消费方出现问题时, 堆积信息无上限.
			- 宕机不丢消息: 机房停电, 服务器重启等, 极端环境中消息不丢失.
			- 支持多语言SDK: 多种语言支持, 不再限定语言开发者技能要求. 便于团队管理.
		
		4.1.3 CMQ VS RabbirMQ
			CMQ{QPS: 仅生产6.8w/s, 仅消费9w/s};
			RabbirMQ{QPS: 仅生产1.25w/s, 仅消费2.6w/s};
		
		4.1.4 CMQ应用场景
			- 消息永不丢失(微信):
			  · CMQ在微信红包系统的分布式事务问题上的得到了体现, 微信架构组在红包系统引入了CMQ, 
			    避免分布式事务增加对系统的开销.
			- 实现高扩展性:
			  · CMQ后端集群对用户来说是透明无感知的, CMQ控制服务器可根据集群的负载情况实时对队列
			    进行调度搬迁.
			- 实现同城容灾:
			  · CMQ支持在金融机房下(2个可用区)分别部署两套CMQ集群, 业务方可以根据实际需求将消息
			    写入任意园区.
		
	4.2 CMQ管理
		- 常用接口介绍:
		  · CreateQueue: 创建队列.
		  · SendMessage: 发送一条消息到指定队列.
		  · ReceiveMessage: 消费队列中的一条消息.
		  · CreateTopic: 创建主题.
		  · PublishMessage: 发布一条消息到指定主题.
		  · Subscribe: 创建订阅.
		  · ListSubscribeByTopic: 获取主题下的订阅列表.

	4.3 CMQ实验

Chapter5 腾讯云消息队列CKafka
	5.1 CKafka简介
		- 腾讯云消息队列CKafka(Cloud Kafka)是基于开源 Apache Kafka消息队列引擎, 
		  提供高吞吐性能, 高可扩展性的消息队列服务. 
		  其功能特性有:
		  · 兼容开源
		  · 上下游生态
		  · 高可靠
		  · 高拓展性
		  · 业务安全
		  · 统一运维监控

		- CKafka优势:
		  · 收发解耦
		  · 可拓展性
		  · 削峰填谷
		  · 可恢复性
		  · 顺序读写
		  · 异步通信
		
		- CKafka应用场景:
		  · 日志分析系统
		  · 流数据处理平台
			CVM云服务器组-->消息队列CKafka-->{流计算SCS-->实时图标展示/异常检测
											  Hadoop-->离线数据分析/存储
											 };
		
		- CKafka VS 开源Kafka
		  开源Kafka{2C 4GB压测: 读写20万QPS; 拓展性: 不灵活; 安全防护: 不支持; 监控告警: 不支持;}
		  CKafka{2C 4GB压测: 读写22万QPS; 拓展性: 非常灵活; 安全防护: 支持; 监控告警: 支持;}
		
		- CMQ VS CKafka
		  CMQ{2C 4GB压测: 读写12万QPS; 常规性能: 十万级QPS; 安全防护: 不支持; 可靠性: 强一致性;}
		  CKafka{2C 4GB压测: 读写22万QPS; 常规性能: 百万级QPS; 安全防护: 支持; 可靠性: 极端情况下可能丢失数据;}

	5.2 CKafka管理
		- 常用的API接口:
		  · CreateTopic: 创建主题
		  · DeleteTopic: 删除主题
		  · AddPartition: 增加分区
		  · ListTopic: 获取主题列表
		  · SetForward: 设置消息转发

