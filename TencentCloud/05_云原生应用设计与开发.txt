Chapter1 云原生简介
	1.1 云原生的演进过程
						 ________________________________ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
						/\
					   /  \			市场需求变化极快					
					  /    \		难以跟上市场变化...					
					 /      \											
					/开发模式\											如何最大程度适应云
				   /  (瀑布)  \											利用云的优势
				  /____________\________________________________
				 /              \
				/	 应用架构	 \		代码复用度低, 难以快速迭代
			   /	(单体架构)	  \		跟不上市场需求变化
			  /____________________\________________________________ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
			 /						\		系统上云(IASS+PASS)
			/		 系统资源		 \		成本大大降低, 效率大大提升, 集群部署, 负载均衡, 弹性伸缩,
		   /	 (服务器  数据库)	  \		存储无限容量, 云数据库高性能, NoSQL数据库
		  /____________________________\________________________________


																							______________________
								___ +==系统资源=========================================+			↑
							   /	| (操作系统)-->(虚拟化)-->(云计算)-->(容器)-->(K8S) |			|
							  /		+===================================================+			|
							 /																		|
		+--------------+	/		+==应用架构=========================================+			|
		| 单体架构应用 |---+------- | (单体架构)---------->(SOA)---------->(微服务架构) |		云原生应用
		+--------------+	\		+===================================================+			|
							 \																		|
							  \		+==生命周期管理=====================================+			|
							   \___ | (瀑布开发)---------->(CI/CD)---------->(CI/CD/CO) |			|
									+===================================================+	________↓_____________

		- 云原生的诞生:
		  · 云平台日益发展丰富的同时, 应用开发架构也应逐渐演进去适应云平台, 以便充分发挥云平台的能力.
			云上的应用应该如何适应现有的云计算架构? 云原生的理念应运而生.
		  · 2013年, Pivotal的MattStine提出了云原生(Cloud Native)的概念.
		  · 2015年7月隶属于Linux基金会的云原生计算基金会(CNCF)应运而生.
		  
		云原生计算基金会CNCF	
		
	1.2 什么是云原生
		- 云原生准确来说是一种文化, 格式一种潮流, 它是云计算的一个必然导向. 意义在于让云成为云化战略成功的基石, 而不是障碍.
		- 结合云原生的概念为"适合云的应用" 和 "好用的云架构"
		  +------+			  +------------+ +----------+ +----------+
		  | SAAS |-----+	  |   	       | |	 	    | |	 	     |
		  +------+	   | 采纳 |  微 服 务  | | 持续交付 | |	 DevOps  |
					   +----->|	  		   | |		    | |	 	     |
		  +------+	   |	  |  (技  术)  | |		    | |	 	     |
		  | SAAS |-----+	  |            | |		    | |	 	     |
		  +------+			  +------------+ |		    | |	 	     | 
											 |		    | |	 	     |
		  +------+			  +------------+ | (管  理) | | (管  理) |
		  | SAAS |----------->|敏捷基础设施| |		    | |			 |
		  +------+			  +------------+ +----------+ +----------+
				云三层概念					  云原生概念
		
		1.2.1 云时代业务与云原生的应用
			+--------------------------+--------------------------+--------------------------------------+
			|      业  务  特  征      |      业  务  要  求      |            云 原 生 应 用            |
			+--------------------------+--------------------------+--------------------------------------+
			| 市场竞争激烈, 需求变化快 |   快速迭代跟随业务变化   | 敏捷, DevOps, 持续集成, 微服务, 容器 |
			+--------------------------+--------------------------+--------------------------------------+
			|     海量用户, 大数据	   |   高并发支持, 数据分析   |   微服务, 高可用, 去中心化, 无状态,  | 
			|						   |						  |   分布式部署, 分布式存储...			 |
			+--------------------------+--------------------------+--------------------------------------+
			|        集中式访问        |  优雅应对流量高峰及低谷  |       弹性伸缩, 容器, 负载均衡       |
			|						   |  即节约成本又能支撑业务  |										 |
			+--------------------------+--------------------------+--------------------------------------+
			|       业务复杂度高       |        复用, 解耦        |微服务,持续集成,自动化测试,灰度发布...|
			+--------------------------+--------------------------+--------------------------------------+
			|		不同开发语言       |微服务需要支持不同开发语言|     SpringCloud, ServiceMesh...      |
			+--------------------------+--------------------------+--------------------------------------+
			
Chapter2 云原生架构的关键技术
	2.1 云原生架构的关键技术
		2.1.1 微服务
			- 把一个庞大的Application拆成几个小的独立的服务, 再把独立的服务串起来的一种架构设计:
			  内聚更强，更加敏捷

		2.1.2 微服务架构的开发优势
			下表对比了微服务架构和传统开发架构:
				+--------------+--------------+--------------+
				|			   | 传统开发架构 |  微服务架构  |
				+--------------+--------------+--------------+
				| 用 户  规 模 |      小      | 大, 访问集中 |
				+--------------+--------------+--------------+
				| 需 求  变 化 |      慢      |      快      |
				+--------------+--------------+--------------+
				| 技术栈多样性 |     单一     |   多样开放   |
				+--------------+--------------+--------------+
				| 开 发  模 型 |     瀑布     | 敏捷, DevOps |
				+--------------+--------------+--------------+
		
		2.1.3 微服务的常见架构 Spring Cloud
			- Spring Cloud的核心:
			  · 服务的注册与发现
				# 服务提供者: 是指服务的被调用方
				# 服务消费者: 是指服务的调用方
			
		2.1.4 微服务的常见架构 ServiceMesh
			- 老系统, 异构语言困境
			  · 老系统改造
				# 老系统牵一发动全身, 没有改造的价值, 没有重构的动力
			  · 新业务上线
				# 又快又稳的上线功能, 等不及老系统拖后腿, 更新频率快
			  · 新老系统兼容
				# 新老系统并行, 需要互相正常通讯, 新的要快, 老的要稳
		
			- Service Mesh架构分层
			  · 数据面(Data Plane): 有独立部署的智能代理进行组成, 加官及控制微服务进程间的业务数据流量
			  · 控制面(Control Plane): 对数据面进行管理及配置流量路由, 策略加强及统计数据采集
			
			- 什么是Sidecar模式?
			  · Sidecar模式是一种将应用功能从应用本身剥离出来作为单独进程的方式. 
			  · 该模式允许我们向应用无侵入添加多种功能, 避免了为满足第三方组件需
			    求而向应用添加额外的配置代码.
			
			- 建议使用ServiceMesh的场景
			  · 集群中存在多语言服务互通的场景
			  · 服务底层基于非Springboot框架进行开发
			  · 遗留系统, 不希望因为微服务化而做过多的侵入式变更
			  · 服务运维人员希望服务框架的升级无需业务联动升级
			
		2.1.5 容器化
			- 容器技术——资源调度, 微服务更容易:
			  · 容器是一种轻量级对的虚拟化技术, 能够在单一主机上提供多个隔离的操作系统,
			    通过一系列的namespace进行进程隔离, 每个容器都有唯一的可写文件系统和资源
				配额.
			
			- Kubernetes(k8s)
			  · 一个开源的, 用于管理云平台中多个主机上的容器化的应用, Kubernetes的目标是让
			    不是容器化的应用简单并且高效(Powerful), Kubernetes提供了应用部署, 规划, 更
				新, 维护的一种机制.
		
		2.1.6 DevOps
			非DevOps模式
				瀑布开发
					Dev | Test | Ops
					Dev |  QA  | 预发布, 生产
				敏捷开发
					Dev + Test | Ops
					   研发		 预发布, 生产
					 质量保证
	
			DevOps模式
				Dev + Test + Ops
					   ||
					集成团队
				· 共享面向客户的价值
				· 共享集成目标
				· 共享质量责任
			
			- DevOps不是一种框架, 工具或者技术
			  · DevOps是一组过程, 方法与系统的统称, 用于促进开发(应用程序/软件工程), 技术运
			    营和质量保障(QA)之间的沟通, 协作与整合: 以终为始, 运维合一.
			  · DevOps还是人们在组织中使用预先定义的过程, 利用自动化工具, 使日常生活中更加高
			    效, 手工工作更少的一种方法.
				
		2.1.7 持续交付
			持续交付----缩小开发者认知, 灵活开发方向
			
	2.2 云原生应用特征
		- 采用轻量级的容器:
		  · 云原生应用程序是打包为轻量级容器的独立自治服务的集合. 与虚拟机相比容器可以实现
			更加快速的扩展, 优化基础架构资源的利用率.
		
		2.2.1 松散耦合的微服务
			设计为松散耦合的微服务:
			+-----------+	+-----------+	+-----------+
			| 			|   |			|	|			|
			| Service-A<+---+>Service-B<+---+>Service-C |
			|			|   |			|	|			|
			|    V M    |	| Container |	|    V M    |
			+-----------+	+-----------+	+-----------+
		
		2.2.2 通过API进行交互
			通过API进行交互协作:
				云原生服务使用轻量级API进行交互, 比如基于RESTFul, gRPC, 或NATS等协议.

							RESTFul, gRPC...
				Service-A <------------------> Service-B
						\					   /
						 \					  /
				RESTFul	  \					 / RESTFul
					gRPC.. \				/ gRPC..
						    \			   /
							 \			  /
							  \			 /
							   \		/
							    \	   /
							    Service..
		
		2.2.3 最佳语言开发
			使用最佳语言和框架开发
			
		2.2.4 DevOps
			通过DevOps流程进行管理:
			
			+=============+			 +==============+			+=============+
			| 代       码 |			 |   存储空间	|			| 开 发 环 境 |
			| 配 置 文 件 |			 | 配置    网络 |			| 测 试 环 境 |
			| 资 源 文 件 |			 | 文件    接口 |			|			  |
			|			  |=====CI===+=> 应用 程序 =+===CD=====>| U A T 环 境 |
			| 脚       本 |			 | 指标    环境 |			|			  |
			| 运 行 时 库 |			 | 采集    变量 |			| 预生产环 境 |
			| 其       他 |			 |   日志收集	|			| 生 产 环 境 |
			+=============+			 +==============+			+=============+
		
		2.2.5  云原生应用的实现
			- 如何实现云原生应用?
			  · 采用微服务架构
			  · 采用敏捷, DevOps开发模式
			  · 应用容器化, 并支持容器的编排调度
			  · 遵循DevOps思想指导(CI/CD/CO)
			  · ...